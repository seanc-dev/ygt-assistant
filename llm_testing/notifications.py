"""Notification system for LLM testing framework alerts."""

import json
import smtplib
import ssl
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any, List, Optional

try:
    import requests
except ImportError:
    requests = None
from dataclasses import dataclass


@dataclass
class NotificationConfig:
    """Configuration for notification providers."""

    # Email configuration
    email_enabled: bool = False
    smtp_server: str = ""
    smtp_port: int = 587
    email_username: str = ""
    email_password: str = ""
    email_recipients: List[str] = None

    # Slack configuration
    slack_enabled: bool = False
    slack_webhook_url: str = ""
    slack_channel: str = "#alerts"

    # Webhook configuration
    webhook_enabled: bool = False
    webhook_url: str = ""
    webhook_headers: Dict[str, str] = None

    def __post_init__(self):
        """Set default values."""
        if self.email_recipients is None:
            self.email_recipients = []
        if self.webhook_headers is None:
            self.webhook_headers = {}


class NotificationProvider:
    """Base class for notification providers."""

    def send_notification(self, alert: Dict[str, Any]) -> bool:
        """Send a notification for an alert. Returns True if successful."""
        raise NotImplementedError


class EmailNotifier(NotificationProvider):
    """Email notification provider."""

    def __init__(self, config: NotificationConfig):
        """Initialize email notifier."""
        self.config = config

    def send_notification(self, alert: Dict[str, Any]) -> bool:
        """Send email notification."""
        if not self.config.email_enabled or not self.config.email_recipients:
            return False

        try:
            # Create message
            msg = MIMEMultipart("alternative")
            msg["Subject"] = f"LLM Testing Alert: {alert['severity'].upper()}"
            msg["From"] = self.config.email_username
            msg["To"] = ", ".join(self.config.email_recipients)

            # Create HTML content
            html_content = self._create_html_content(alert)
            msg.attach(MIMEText(html_content, "html"))

            # Send email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.config.email_username, self.config.email_password)
                server.send_message(msg)

            return True

        except Exception as e:
            print(f"Failed to send email notification: {e}")
            return False

    def _create_html_content(self, alert: Dict[str, Any]) -> str:
        """Create HTML content for email."""
        severity_color = {
            "critical": "#dc3545",
            "high": "#fd7e14",
            "medium": "#ffc107",
            "low": "#28a745",
        }.get(alert.get("severity", "medium"), "#6c757d")

        return f"""
        <html>
        <body>
            <h2 style="color: {severity_color};">LLM Testing Alert</h2>
            <p><strong>Severity:</strong> {alert.get('severity', 'unknown').upper()}</p>
            <p><strong>Type:</strong> {alert.get('type', 'unknown')}</p>
            <p><strong>Message:</strong> {alert.get('message', 'No message')}</p>
            <p><strong>Timestamp:</strong> {alert.get('first_seen', datetime.now().isoformat())}</p>
            <hr>
            <p><em>This alert was generated by the LLM Testing Framework.</em></p>
        </body>
        </html>
        """


class SlackNotifier(NotificationProvider):
    """Slack notification provider."""

    def __init__(self, config: NotificationConfig):
        """Initialize Slack notifier."""
        self.config = config

    def send_notification(self, alert: Dict[str, Any]) -> bool:
        """Send Slack notification."""
        if not self.config.slack_enabled or not self.config.slack_webhook_url:
            return False

        if requests is None:
            print("❌ requests library not available for Slack integration")
            return False

        try:
            # Create Slack message
            message = self._create_slack_message(alert)

            # Send to Slack
            response = requests.post(
                self.config.slack_webhook_url,
                json=message,
                timeout=10,
            )

            return response.status_code == 200

        except Exception as e:
            print(f"Failed to send Slack notification: {e}")
            return False

    def _create_slack_message(self, alert: Dict[str, Any]) -> Dict[str, Any]:
        """Create Slack message format."""
        severity_emoji = {
            "critical": "🚨",
            "high": "⚠️",
            "medium": "⚠️",
            "low": "ℹ️",
        }.get(alert.get("severity", "medium"), "ℹ️")

        color = {
            "critical": "#dc3545",
            "high": "#fd7e14",
            "medium": "#ffc107",
            "low": "#28a745",
        }.get(alert.get("severity", "medium"), "#6c757d")

        return {
            "channel": self.config.slack_channel,
            "attachments": [
                {
                    "color": color,
                    "title": f"{severity_emoji} LLM Testing Alert",
                    "fields": [
                        {
                            "title": "Severity",
                            "value": alert.get("severity", "unknown").upper(),
                            "short": True,
                        },
                        {
                            "title": "Type",
                            "value": alert.get("type", "unknown"),
                            "short": True,
                        },
                        {
                            "title": "Message",
                            "value": alert.get("message", "No message"),
                            "short": False,
                        },
                        {
                            "title": "Timestamp",
                            "value": alert.get(
                                "first_seen", datetime.now().isoformat()
                            ),
                            "short": True,
                        },
                    ],
                    "footer": "LLM Testing Framework",
                    "ts": int(datetime.now().timestamp()),
                }
            ],
        }


class WebhookNotifier(NotificationProvider):
    """Webhook notification provider."""

    def __init__(self, config: NotificationConfig):
        """Initialize webhook notifier."""
        self.config = config

    def send_notification(self, alert: Dict[str, Any]) -> bool:
        """Send webhook notification."""
        if not self.config.webhook_enabled or not self.config.webhook_url:
            return False

        if requests is None:
            print("❌ requests library not available for webhook integration")
            return False

        try:
            # Create webhook payload
            payload = self._create_webhook_payload(alert)

            # Send webhook
            response = requests.post(
                self.config.webhook_url,
                json=payload,
                headers=self.config.webhook_headers,
                timeout=10,
            )

            return response.status_code in [200, 201, 202]

        except Exception as e:
            print(f"Failed to send webhook notification: {e}")
            return False

    def _create_webhook_payload(self, alert: Dict[str, Any]) -> Dict[str, Any]:
        """Create webhook payload."""
        return {
            "source": "llm_testing_framework",
            "timestamp": datetime.now().isoformat(),
            "alert": {
                "severity": alert.get("severity", "unknown"),
                "type": alert.get("type", "unknown"),
                "message": alert.get("message", "No message"),
                "first_seen": alert.get("first_seen", datetime.now().isoformat()),
                "key": alert.get("key", ""),
            },
        }


class NotificationManager:
    """Manages multiple notification providers."""

    def __init__(self, config: NotificationConfig):
        """Initialize notification manager."""
        self.config = config
        self.providers = []

        # Initialize providers based on configuration
        if config.email_enabled:
            self.providers.append(EmailNotifier(config))

        if config.slack_enabled:
            self.providers.append(SlackNotifier(config))

        if config.webhook_enabled:
            self.providers.append(WebhookNotifier(config))

    def send_notification(self, alert: Dict[str, Any]) -> Dict[str, bool]:
        """Send notification through all configured providers."""
        results = {}

        for provider in self.providers:
            provider_name = provider.__class__.__name__.replace("Notifier", "").lower()
            try:
                results[provider_name] = provider.send_notification(alert)
            except Exception as e:
                print(f"Error sending {provider_name} notification: {e}")
                results[provider_name] = False

        return results

    def test_connections(self) -> Dict[str, bool]:
        """Test all notification provider connections."""
        test_alert = {
            "severity": "low",
            "type": "test",
            "message": "This is a test notification from the LLM Testing Framework",
            "first_seen": datetime.now().isoformat(),
            "key": "test_connection",
        }

        return self.send_notification(test_alert)


def create_notification_config_from_dict(
    config_dict: Dict[str, Any],
) -> NotificationConfig:
    """Create NotificationConfig from dictionary."""
    return NotificationConfig(
        email_enabled=config_dict.get("email_enabled", False),
        smtp_server=config_dict.get("smtp_server", ""),
        smtp_port=config_dict.get("smtp_port", 587),
        email_username=config_dict.get("email_username", ""),
        email_password=config_dict.get("email_password", ""),
        email_recipients=config_dict.get("email_recipients", []),
        slack_enabled=config_dict.get("slack_enabled", False),
        slack_webhook_url=config_dict.get("slack_webhook_url", ""),
        slack_channel=config_dict.get("slack_channel", "#alerts"),
        webhook_enabled=config_dict.get("webhook_enabled", False),
        webhook_url=config_dict.get("webhook_url", ""),
        webhook_headers=config_dict.get("webhook_headers", {}),
    )
