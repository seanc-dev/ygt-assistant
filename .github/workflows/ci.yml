name: CI

on:
  pull_request:
  push:
    branches: [ main, feat/**, chore/** ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Validate JSON Schemas
        run: |
          python - << 'PY'
import json, os
from pathlib import Path
from jsonschema import Draft202012Validator
p = Path('contracts')
for name in [
  'approval.schema.json',
  'draft.schema.json',
  'automation.schema.json',
  'note.schema.json',
  'core_memory.schema.json',
]:
    with open(p / name, 'r') as f:
        schema = json.load(f)
    Draft202012Validator.check_schema(schema)
print('Schemas valid')
PY
      - name: Run tests
        run: pytest -q
  agent-evals:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run agent evals (@e2e)
        env:
          RUN_E2E: true
        run: pytest -q -m e2e
  llm-loop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run llm_testing minimal loop (in-process)
        run: |
          python - << 'PY'
from llm_testing.backends.inprocess import InProcessBackend
from llm_testing.evaluation_loop import MinimalEvaluationLoop
backend = InProcessBackend()
loop = MinimalEvaluationLoop(backend)
out = loop.run_smoke()
print({k: type(v).__name__ for k,v in out.items()})
PY
      - name: Dry-run apply schema and migrations
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: app
        run: |
          psql -v ON_ERROR_STOP=1 -f supabase/schema.sql
          for f in supabase/migrations/*.sql; do
            echo "Applying $f";
            psql -v ON_ERROR_STOP=1 -f "$f";
          done
